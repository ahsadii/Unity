using UnityEngine;

[RequireComponent(typeof(ParticleSystem))]
public class WaterfallSimulation : MonoBehaviour
{
    [Header("Main Settings")]
    public float waterfallWidth = 1f;      // Ширина водопада
    public float waterfallHeight = 5f;     // Высота, с которой падает вода
    public float flowIntensity = 100f;     // Интенсивность потока (частиц в секунду)
    public Color waterColor = new Color(0, 0.7f, 1f, 0.8f); // Цвет воды

    [Header("Splash Effect (Optional)")]
    public bool enableSplash = true;       // Включить брызги внизу
    public float splashSize = 0.2f;       // Размер брызг
    public int splashParticles = 20;      // Количество брызг

    private ParticleSystem waterfallPS;
    private ParticleSystem splashPS;

    void Start()
    {
        // Создаем основной Particle System для водопада
        waterfallPS = GetComponent<ParticleSystem>();
        SetupWaterfall();

        // Создаем Particle System для брызг (если включено)
        if (enableSplash)
        {
            CreateSplashEffect();
        }
    }

    void SetupWaterfall()
    {
        var main = waterfallPS.main;
        main.startSpeed = 5f;
        main.startLifetime = 2f;
        main.startSize = 0.1f;
        main.gravityModifier = 0.5f;
        main.maxParticles = 1000;

        var emission = waterfallPS.emission;
        emission.rateOverTime = flowIntensity;

        var shape = waterfallPS.shape;
        shape.shapeType = ParticleSystemShapeType.Box;
        shape.scale = new Vector3(waterfallWidth, 0.5f, 0.1f);

        var colorOverLifetime = waterfallPS.colorOverLifetime;
        Gradient gradient = new Gradient();
        gradient.SetKeys(
            new GradientColorKey[] { new GradientColorKey(waterColor, 0f), new GradientColorKey(waterColor, 0.7f) },
            new GradientAlphaKey[] { new GradientAlphaKey(0.8f, 0f), new GradientAlphaKey(0f, 1f) }
        );
        colorOverLifetime.color = gradient;

        var sizeOverLifetime = waterfallPS.sizeOverLifetime;
        sizeOverLifetime.enabled = true;
        AnimationCurve curve = new AnimationCurve(
            new Keyframe(0f, 0.1f),
            new Keyframe(0.5f, 0.15f),
            new Keyframe(1f, 0f)
        );
        sizeOverLifetime.size = new ParticleSystem.MinMaxCurve(1f, curve);
    }

    void CreateSplashEffect()
    {
        GameObject splashObj = new GameObject("SplashEffect");
        splashObj.transform.position = transform.position - new Vector3(0, waterfallHeight, 0);
        splashPS = splashObj.AddComponent<ParticleSystem>();

        var main = splashPS.main;
        main.startSpeed = 2f;
        main.startLifetime = 0.5f;
        main.startSize = splashSize;
        main.maxParticles = 100;

        var emission = splashPS.emission;
        emission.rateOverTime = 0; // Брызги будут создаваться триггером
        emission.SetBursts(new ParticleSystem.Burst[] { new ParticleSystem.Burst(0f, splashParticles) });

        var shape = splashPS.shape;
        shape.shapeType = ParticleSystemShapeType.Sphere;
        shape.radius = 0.5f;
    }

    // Регулировка интенсивности потока в реальном времени
    public void SetFlowIntensity(float intensity)
    {
        flowIntensity = intensity;
        var emission = waterfallPS.emission;
        emission.rateOverTime = flowIntensity;
    }
}
